#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Outputs a fully inflected version of a lemmatized test set (provided on STDIN). 
If training data is provided, it will use a unigram model to select the form.
usage: cat LEMMA_FILE | python inflect
       [-t TRAINING_PREFIX] [-l LEMMA_SUFFIX] [-w WORD_SUFFIX]
"""

import argparse
import codecs
import sys
import os
from collections import defaultdict
from itertools import izip

from tree import DepTree

PARSER = argparse.ArgumentParser(description="Inflect a lemmatized corpus")
PARSER.add_argument("-t", type=str, default="data/train", help="training data prefix")
PARSER.add_argument("-d", type=str, default="data/dtest", help="test data prefix")
PARSER.add_argument("-l", type=str, default="lemma", help="lemma file suffix")
PARSER.add_argument("-w", type=str, default="form", help="word file suffix")
PARSER.add_argument("-r", type=str, default="tree", help="tree file suffix")
args = PARSER.parse_args()

# Python sucks at UTF-8
sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
sys.stdin = codecs.getreader('utf-8')(sys.stdin)

def inflections(lemma, tree):
    # same as bigram with tuple now lemma and tree representation
    if LEMMAS.has_key((lemma, tree)):
        return sorted(LEMMAS[(lemma, tree)].keys(), lambda x, y: cmp(LEMMAS[(lemma, tree)][y], LEMMAS[(lemma, tree)][x]))
    elif LEMMAS.has_key(lemma):
        return sorted(LEMMAS[lemma].keys(), lambda x, y: cmp(LEMMAS[lemma][y], LEMMAS[lemma][x]))
    return [lemma]

def best_inflection(lemma, tree):
    return inflections(lemma, tree)[0]

if __name__ == '__main__':
    # Build a simple unigram model on the training data
    LEMMAS = defaultdict(defaultdict)
    if args.t:
        def combine(a, b): return '%s.%s' % (a, b)
        def utf8read(file): return codecs.open(file, 'r', 'utf-8')
        # Build the LEMMAS hash, a two-level dictionary mapping lemmas to inflections to counts
        for words, lemmas, treestr in izip(utf8read(combine(args.t, args.w)), utf8read(combine(args.t, args.l)), utf8read(combine(args.t, args.r))):
            for word, lemma, node in izip(words.rstrip().lower().split(), lemmas.rstrip().lower().split(), DepTree(treestr)):
                # use provided node class to define tree
                tree = (node.parent_index(), node.label())
                LEMMAS[lemma][word] = LEMMAS[lemma].get(word, 0) + 1
                # tuple of lemma and tree used for dictionary key
                LEMMAS[(lemma, tree)][word] = LEMMAS[(lemma, tree)].get(word, 0) + 1

    # Choose the most common inflection for each word and output them as a sentence
    for lemmas, treestr in izip(utf8read(combine(args.d, args.l)), utf8read(combine(args.d, args.r))):
        # best inflection for words, lemmas, trees input to inflections
        print ' '.join([best_inflection(y, (z.parent_index(), z.label())) for y, z in izip(lemmas.rstrip().lower().split(), DepTree(treestr))])