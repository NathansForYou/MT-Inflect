#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Outputs a fully inflected version of a lemmatized test set (provided on STDIN). 
If training data is provided, it will use a unigram model to select the form.
usage: cat LEMMA_FILE | python inflect
       [-t TRAINING_PREFIX] [-l LEMMA_SUFFIX] [-w WORD_SUFFIX]
"""

import argparse
import codecs
import sys
import os
import fileinput
from collections import defaultdict
from itertools import izip

PARSER = argparse.ArgumentParser(description="Inflect a lemmatized corpus")
PARSER.add_argument("-t", type=str, default="data/train", help="training data prefix")
PARSER.add_argument("-l", type=str, default="lemma", help="lemma file suffix")
PARSER.add_argument("-w", type=str, default="form", help="word file suffix")
PARSER.add_argument("-p", type=str, default="tag", help="part of speech suffix")
args = PARSER.parse_args()

# Python sucks at UTF-8
sys.stdout = codecs.getwriter('utf-8')(sys.stdout) 
sys.stdin = codecs.getreader('utf-8')(sys.stdin) 

def inflections(lemma, pos):
    if LEMMAS.has_key((lemma, pos)):
        return sorted(LEMMAS[(lemma, pos)].keys(), lambda x,y: cmp(LEMMAS[lemma][y], LEMMAS[lemma][x]))
    elif LEMMAS.has_key(lemma):
        return sorted(LEMMAS[lemma].keys(), lambda x,y: cmp(LEMMAS[lemma][y], LEMMAS[lemma][x]))
    return [lemma]

def best_inflection(lemma, pos):
    return inflections(lemma, pos)[0]

if __name__ == '__main__':

    # Build a simple unigram model on the training data
    LEMMAS = defaultdict(defaultdict)
    if args.t:
        def combine(a, b): return '%s.%s' % (a, b)
        def utf8read(file): return codecs.open(file, 'r', 'utf-8')
        # Build the LEMMAS hash, a two-level dictionary mapping lemmas to inflections to counts
        for words, lemmas, parts in izip(utf8read(combine(args.t, args.w)), utf8read(combine(args.t, args.l)), utf8read(combine(args.t, args.p))):
            for word, lemma, pos in izip(words.rstrip().lower().split(), lemmas.rstrip().lower().split(), parts.rstrip().lower().split()):
                LEMMAS[(lemma, pos)][word] = LEMMAS[(lemma, pos)].get(word,0) + 1

    # Choose the most common inflection for each word and output them as a sentence
    #for line in sys.argv[0]:
    '''f = fileinput.input(files=('dtest.lemma', 'dtest.tag')) 
    for line in f:
        lemmas = []
        for lemma, pos in line.rstrip().split():
            lemmas.append(best_inflection(lemma, pos))
        print ' '.join(lemmas)
    f.close()'''

    with open('data/dtest.lemma') as f1, open('data/dtest.tag') as f2:
        for x, y in izip(f1, f2):
            lemmas = []
            for lemma, pos in izip(x.rstrip().lower().split(), y.rstrip().lower().split()):
                lemmas.append(best_inflection(lemma, pos))
            print ' '.join(lemmas)





